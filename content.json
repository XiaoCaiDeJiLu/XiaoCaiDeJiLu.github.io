{"meta":{"title":"小蔡的记录","subtitle":"今天又是美好的一天","description":"今天又是美好的一天","author":"蔡文涛","url":"http://hexo.caiwentao.top","root":"/"},"pages":[],"posts":[{"title":"centos7安装docker","slug":"centos7安装docker","date":"2023-03-28T07:44:09.000Z","updated":"2023-03-28T07:49:49.523Z","comments":true,"path":"2023/03/28/centos7安装docker/","link":"","permalink":"http://hexo.caiwentao.top/2023/03/28/centos7%E5%AE%89%E8%A3%85docker/","excerpt":"centos7安装docker","text":"centos7安装docker centos7安装docker 1、首先安装 Docker 必要依赖包 1yum install -y yum-utils device-mapper-persistent-data lvm2 由于自带 yum 没有 Docker-CE 所以我们需要先增加 [docker repo](https://www.zhihu.com/search?q=docker repo&amp;search_source&#x3D;Entity&amp;hybrid_search_source&#x3D;Entity&amp;hybrid_search_extra&#x3D;{“sourceType”%3A”answer”%2C”sourceId”%3A2232908219}) 1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 2、安装docker 12345678# 安装yum install -y docker-ce# 验证docker -v# 启动dockerservice docker start# 设置开机启动chkconfig docker on 3、配置docker 因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub 依次执行以下命令 12345echo &quot;OPTIONS=&#x27;--registry-mirror=https://mirror.ccs.tencentyun.com&#x27;&quot; &gt;&gt; /etc/sysconfig/dockersystemctl daemon-reloadservice docker restart","categories":[],"tags":[]},{"title":"centos7安装nginx-http-flv","slug":"centos7安装nginx-http-flv","date":"2023-03-28T01:38:14.000Z","updated":"2023-03-28T05:08:12.716Z","comments":true,"path":"2023/03/28/centos7安装nginx-http-flv/","link":"","permalink":"http://hexo.caiwentao.top/2023/03/28/centos7%E5%AE%89%E8%A3%85nginx-http-flv/","excerpt":"预览 centos7安装nginx-http-flv","text":"预览 centos7安装nginx-http-flv centos7安装nginx-http-flv 1、安装依赖 123456yum install unzip -yyum install gcc-c++ -yyum install pcre pcre-devel -y yum install zlib zlib-devel -y yum install openssl openssl-devel -yyum install yasm -y 2、安装 12345678910111213141516171819cd /usr/local/# 下载nginx源码 wget https://github.com/nginx/nginx/archive/refs/tags/release-1.23.3.tar.gz -O nginx-1.23.3.tar.gz# 如果国内服务器下载缓慢或者下载失败可以替换以下地址【在连接前添加github站点加速地址】wget http://gh.301.ee/https://github.com/nginx/nginx/archive/refs/tags/release-1.23.3.tar.gz -O nginx-1.23.3.tar.gz#解压tar -zxvf nginx-1.23.3.tar.gzcd nginx-release-1.23.3/#下载nginx-http-flv-module源码wget https://github.com/winshining/nginx-http-flv-module/archive/master.zip# 如果国内服务器下载缓慢或者下载失败可以替换以下地址【在连接前添加github站点加速地址】wget http://gh.301.ee/https://github.com/winshining/nginx-http-flv-module/archive/master.zip#解压unzip master.zip#添加模块到nginx./auto/configure --prefix=/usr/local/nginx --add-module=./nginx-http-flv-module-master --with-http_ssl_module#安装make &amp;&amp; make install 3、安装FFmpeg 先安装nasm 12345678910cd /usr/local# 下载nasm源码 wget https://www.nasm.us/pub/nasm/releasebuilds/2.16/nasm-2.16.tar.gz#解压tar -zxvf nasm-2.16.tar.gzcd nasm-2.16/#自定义安装./configure#安装make &amp;&amp; make install 再安装x264（视频流转码，必用，不然会推流失败 12345678910cd /usr/local# 下载x264源码 wget https://code.videolan.org/videolan/x264/-/archive/master/x264-master.zip#解压unzip x264-master.zipcd x264-master/#自定义安装./configure --enable-static --enable-shared #安装make &amp;&amp; make install 安装FFmpeg,时间长耐心等待 123456789101112131415161718192021222324252627cd /usr/local# 下载nasm源码 wget http://www.ffmpeg.org/releases/ffmpeg-6.0.tar.gz#解压tar -zxvf ffmpeg-6.0.tar.gzcd ffmpeg-6.0/#自定义安装./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-libx264 # 如果提示 ERROR: x264 not found using pkg-config# 向 /etc/profile 文件追加export PKG_CONFIG_PATH=/usr/local/x264/lib/pkgconfig具体看各位自己x264的安装路径echo &quot;export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig&quot; &gt;&gt; /etc/profilesource /etc/profile#然后再次执行./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-libx264 #安装make &amp;&amp; make install#复制bincp /usr/local/ffmpeg/bin/* /usr/bin/#验证ffmpeg -version# 如果出现 error while loading shared libraries 错误# 这里我们需要配置 /etc/ld.so.conf。这个文件记录了编译时使用的动态链接库的路径,告诉链接器去哪个路径下寻找链接时需要用到的库,如果找不到,就会提示链接错误。echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.confldconfig#再次验证ffmpeg -version#推流测试ffmpeg -re -stream_loop -1 -i /usr/local/mp4/1.mp4 -f flv -vcodec libx264 -vprofile baseline -acodec aac -strict experimental -ar 44100 -ac 2 -b:a 96k -r 25 -b:v 500k -s 640*480 -f flv -q 10 rtmp://82.157.179.204:1935/myvideo/101","categories":[],"tags":[]},{"title":"windows编译nginx-http-flv-module","slug":"windows编译nginx-http-flv-module","date":"2023-03-24T05:13:33.000Z","updated":"2023-03-27T01:56:30.243Z","comments":true,"path":"2023/03/24/windows编译nginx-http-flv-module/","link":"","permalink":"http://hexo.caiwentao.top/2023/03/24/windows%E7%BC%96%E8%AF%91nginx-http-flv-module/","excerpt":"","text":"windows编译nginx-http-flv-module环境要求Visual Studio1、 安装Visual Studio2022专业版 密钥TD244-P4NB7-YQ6XK-Y8MMM-YWV2J 2、配置环境变量 系统变量 path D:\\SoftWare\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.35.32215\\bin\\Hostx64\\x64; 用户变量 INCLUDE D:\\SoftWare\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.35.32215\\include D:\\Windows Kits\\10\\Include\\10.0.22000.0\\cppwinrt D:\\Windows Kits\\10\\Include\\10.0.22000.0\\shared D:\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt D:\\Windows Kits\\10\\Include\\10.0.22000.0\\um D:\\Windows Kits\\10\\Include\\10.0.22000.0\\winrt LIB D:\\SoftWare\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.35.32215\\lib\\x64 D:\\Windows Kits\\10\\Lib\\10.0.22000.0\\ucrt D:\\Windows Kits\\10\\Lib\\10.0.22000.0\\ucrt_enclave D:\\Windows Kits\\10\\Lib\\10.0.22000.0\\um 3、验证环境变量cmd输入cl 下载nginx源码 github地址：nginx 新建objs文件夹 在objs文件夹中，新建lib文件夹，将nginx-http-flv-module，PCRE, zlib 和编译后的OpenSSL 解压到此处 建议使用pcre-8.43和openssl-1.1.1c版本 openssl编译 1、安装依赖工具 安装Strawberry Perl：https://strawberryperl.com/ 安装Netwide Assembler (NASM)：https://www.nasm.us/ 当然还需要VIsual Studio 2、配置环境变量 path D:\\SoftWare\\Strawberry\\perl\\bin D:\\SoftWare\\Strawberry\\c\\bin D:\\SoftWare\\NASM 验证cmd输入 12perl -vnasm -v 2、编译openssl 管理员运行x64 Native Tools Command Prompt for VS 2022 12345cd openssl-1.1.1cperl Configure VC-WIN64A --prefix=D:\\WorkSpace\\openssl-1.1.1cnmakenmake testnmake install 如果提示文件夹不存在创建对应文件夹之后重试 打开MSYS2 MSYS，使用cd命令来到nginx文件夹下，执行以下命令 123456789101112131415161718192021auto/configure \\ --with-cc=cl \\ --with-debug \\ --prefix= \\ --conf-path=conf/nginx.conf \\ --pid-path=logs/nginx.pid \\ --http-log-path=logs/access.log \\ --error-log-path=logs/error.log \\ --sbin-path=nginx.exe \\ --http-client-body-temp-path=temp/client_body_temp \\ --http-proxy-temp-path=temp/proxy_temp \\ --http-fastcgi-temp-path=temp/fastcgi_temp \\ --http-scgi-temp-path=temp/scgi_temp \\ --http-uwsgi-temp-path=temp/uwsgi_temp \\ --with-cc-opt=-DFD_SETSIZE=1024 \\ --with-pcre=objs/lib/pcre-8.43 \\ --with-zlib=objs/lib/zlib-1.2.13 \\ --with-openssl=objs/lib/openssl-1.1.1c \\ --with-openssl-opt=no-asm \\ --add-module=objs/lib/nginx-http-flv-module \\ --with-http_ssl_module \\ 生成好makefile文件，修改nginx\\auto\\lib\\openssl\\makefile.msvc文件：将VC-WIN32改为VC-WIN64A，将ms\\do_ms 改为ms\\do_win64a修改objs\\Makefile文件：将“-WX”删除，否则nmake时会报错“nginx error:c2220:警告被视为错误 - 没有生成object文件” 管理员运行x64 Native Tools Command Prompt for VS 2022 切换到nginx目录 nmake nmake -f objs\\Makefile","categories":[],"tags":[]},{"title":"hexo搭建","slug":"hexo搭建","date":"2023-03-22T09:54:43.000Z","updated":"2023-03-29T01:17:03.735Z","comments":true,"path":"2023/03/22/hexo搭建/","link":"","permalink":"http://hexo.caiwentao.top/2023/03/22/hexo%E6%90%AD%E5%BB%BA/","excerpt":"","text":"hexo搭建前言欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 问题解答 中的解答，或者在 GitHub、Google Group 上提问。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 1、安装hexo依赖环境 Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) Git 2、安装hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1npm install -g hexo-cli 安装以后，可以使用以下两种方式执行 Hexo： npx hexo &lt;command&gt; 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo &lt;command&gt;： 1echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile 3、初始化hexo 创建文件夹 在新创建的文件夹下打开cmd 初始化hexo目录结构 1hexo init 4、配置信息打开**_config.yml**文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106# Hexo Configuration hexo配置文件## Docs: https://hexo.io/docs/configuration.html hexo文档## Source: https://github.com/hexojs/hexo/ hexo源代码# Site 站点配置title: 网站标题subtitle: 副标题description: 描述keywords: 关键字（用于seo）author: 作者language: 语言（中文为zh-CN）timezone: 时区# URL 网站地址## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: 域名permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks# Directorysource_dir: 资源文件夹是存放用户资源的地方public_dir: tag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: &#x27;&#x27;filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: &#x27;&#x27; wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: &#x27;&#x27;# Home page setting# path: Root path for your blogs index page. (default = &#x27;&#x27;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &#x27;&#x27; per_page: 10 order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;updated_option: &#x27;mtime&#x27;# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the &#x27;source/&#x27; folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: 主题# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: &#x27;&#x27; 5、主题配置 选择主题 hexo主题 下载主题到themes文件夹 修改**_config.yml**中theme为对应主题 6、开启站内搜索_config.yml默认是开启站内搜索的，但是实际不能用，原因是没有配置hexo-generator-json-content 插件。 安装hexo-generator-json-content 插件。 1npm i hexo-generator-json-content 安装后还需要在主题的_config.yml添加如下配置。重启下server,这样才能真正开启站内搜索了。 1234567891011121314151617181920212223242526272829303132333435363738jsonContent: meta: true drafts: false file: content.json keywords: undefined dateFormat: undefined pages: title: true slug: true date: true updated: true comments: true path: true link: true permalink: true excerpt: true keywords: false text: true raw: false content: false author: true posts: title: true slug: true date: true updated: true comments: true path: true link: true permalink: true excerpt: true keywords: false text: true raw: false content: false author: true categories: true tags: true 7、 多部署对应type需要安装对应的插件 git插件安装 1npm install hexo-deployer-git --save 阿里云oss插件安装 1npm install hexo-deployer-ali-oss --save oss插件安装 1npm install hexo-deployer-cos --save _config.yml配置 1234567891011121314151617181920deploy:# 阿里云oss部署- type: ali-oss region: &lt;您的oss 区域代码&gt; accessKeyId: &lt;您的oss accessKeyId&gt; accessKeySecret: &lt;您的oss accessKeySecret&gt; bucket: &lt;您的bucket name&gt;# 腾讯云oss部署- type: cos appId: &lt;您的oss appId&gt; secretId: &lt;您的oss secretId&gt; secretKey: &lt;您的oss secretKey&gt; bucket: &lt;您的oss 存储桶&gt; region: &lt;您的oss 区域代码&gt;# github- type: git repo: github: &lt;您的Github仓库地址&gt; gitee: &lt;您的Gitee仓库地址&gt; 编译并部署 123456#清除缓存文件hexo clean#编译hexo g#上传hexo d","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-03-14T05:02:54.940Z","updated":"2023-03-14T05:02:54.940Z","comments":true,"path":"2023/03/14/hello-world/","link":"","permalink":"http://hexo.caiwentao.top/2023/03/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}